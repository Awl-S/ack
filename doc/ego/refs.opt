%T Principles of compiler design
%A A.V. Aho
%A J.D. Ullman
%I Addison-Wesley
%C Reading, Massachusetts
%D 1978

%T The Design and Analysis of Computer Algorithms
%A A.V. Aho
%A J.E. Hopcroft
%A J.D. Ullman
%I Addison-Wesley
%C Reading, Massachusetts
%D 1974

%T Code generation in a machine-independent compiler
%A R.G.G. Cattell
%A J.M. Newcomer
%A B.W. Leverett
%J SIGPLAN Notices
%V 14
%N 8
%P 65-75
%D August 1979

%T An algorithm for Reduction of Operator Strength
%A J. Cocke
%A K. Kennedy
%J CACM
%V 20
%N 11
%P 850-856
%D November 1977

%T Reduction of Operator Strength
%A F.E. Allen
%A J. Cocke
%A K. Kennedy
%B Program Flow Analysis
%E S.S. Muchnick and  D. Jones
%I Prentice-Hall
%C Englewood Cliffs, N.J.
%D 1981

%T Simplifying Code Generation Through Peephole Optimization
%A J.W. Davidson
%R Ph.D. thesis
%I Dept. of Computer Science
%C Univ. of Arizona
%D December 1981

%T A study of selective optimization techniques
%A G.R. Katkus
%R Ph.D. Thesis
%C University of Southern California
%D 1973

%T Automatic subroutine generation in an optimizing compiler
%A J.B. Shaffer
%R Ph.D. Thesis
%C University of Maryland
%D 1978

%T Optimal mixed code generation for microcomputers
%A D.S. Photopoulos
%R Ph.D. Thesis
%C Northeastern University
%D 1981

%T The Design of an Optimizing Compiler
%A W.A. Wulf
%A R.K. Johnsson
%A C.B. Weinstock
%A S.O. Hobbs
%A C.M. Geschke
%I American Elsevier Publishing Company
%C New York
%D 1975

%T Retargetable Compiler Code Generation
%A M. Ganapathi
%A C.N. Fischer
%A J.L. Hennessy
%J ACM Computing Surveys
%V 14
%N 4
%P 573-592
%D December 1982

%T An Optimizing Pascal Compiler
%A R.N. Faiman
%A A.A. Kortesoja
%J IEEE Trans. on Softw. Eng.
%V 6
%N 6
%P 512-518
%D November 1980

%T Experience with the SETL Optimizer
%A S.M. Freudenberger
%A J.T. Schwartz
%J TOPLAS
%V 5
%N 1
%P 26-45
%D Januari 1983

%T An Optimizing Ada Compiler
%A W. Kirchgaesner
%A J. Uhl
%A G. Winterstein
%A G. Goos
%A M. Dausmann
%A S. Drossopoulou
%I Institut fur Informatik II, Universitat Karlsruhe
%D February 1983

%T A Fast Algorithm for Finding Dominators
in a Flowgraph
%A T. Lengauer
%A R.E. Tarjan
%J TOPLAS
%V 1
%N 1
%P 121-141
%D July 1979

%T Optimization of hierarchical directed graphs
%A M.T. Lepage
%A D.T. Barnard
%A A. Rudmik
%J Computer Languages
%V 6
%N 1
%P 19-34
%D Januari 1981

%T Object Code Optimization
%A E.S. Lowry
%A C.W. Medlock
%J CACM
%V 12
%N 1
%P 13-22
%D Januari 1969

%T Automatic Program Improvement:
Variable Usage Transformations
%A B. Maher
%A D.H. Sleeman
%J TOPLAS
%V 5
%N 2
%P 236-264
%D April 1983

%T The design of a global optimizer
%A R.J. Mintz
%A G.A. Fisher
%A M. Sharir
%J SIGPLAN Notices
%V 14
%N 9
%P 226-234
%D September 1979

%T Global Optimization by Suppression of Partial Redundancies
%A E. Morel
%A C. Renvoise
%J CACM
%V 22
%N 2
%P 96-103
%D February 1979

%T Efficient Computation of Expressions with Common Subexpressions
%A B. Prabhala
%A R. Sethi
%J JACM
%V 27
%N 1
%P 146-163
%D Januari 1980

%T An Analysis of Inline Substitution for a Structured
Programming Language
%A R.W. Scheifler
%J CACM
%V 20
%N 9
%P 647-654
%D September 1977

%T Immediate Predominators in a Directed Graph
%A P.W. Purdom
%A E.F. Moore
%J CACM
%V 15
%N 8
%P 777-778
%D August 1972

%T The Generation of Optimal Code for Arithmetic Expressions
%A R. Sethi
%A J.D. Ullman
%J JACM
%V 17
%N 4
%P 715-728
%D October 1970

%T Exposing side-effects in a PL/I optimizing compiler
%A T.C. Spillman
%B Information Processing 1971
%I North-Holland Publishing Company
%C Amsterdam
%P 376-381
%D 1971

%T Inner Loops in Flowgraphs and Code Optimization
%A S. Vasudevan
%J Acta Informatica
%N 17
%P 143-155
%D 1982

%T A New Strategy for Code Generation - the General-Purpose
Optimizing Compiler
%A W.H. Harrison
%J IEEE Trans. on Softw. Eng.
%V 5
%N 4
%P 367-373
%D July 1979

%T PQCC: A Machine-Relative Compiler Technology
%A W.M. Wulf
%R CMU-CS-80-144
%I Carnegie-Mellon University
%C Pittsburgh
%D 25 september 1980

%T Machine-independent Pascal code optimization
%A D.R. Perkins
%A R.L. Sites
%J SIGPLAN Notices
%V 14
%N 8
%P 201-207
%D August 1979

%T A Case Study of a New Code Generation Technique for Compilers
%A J.L. Carter
%J CACM
%V 20
%N 12
%P 914-920
%D December 1977

%T Table-driven Code Generation
%A S.L. Graham
%J IEEE Computer
%V 13
%N 8
%P 25-33
%D August 1980

%T Register Allocation in Optimizing Compilers
%A B.W. Leverett
%R Ph.D. Thesis, CMU-CS-81-103
%I Carnegie-Mellon University
%C Pittsburgh
%D February 1981

%T Register Allocation via Coloring
%A G.J. Chaitin
%A M.A. Auslander
%A A.K. Chandra
%A J. Cocke
%A M.E. Hopkins
%A P.W. Markstein
%J Computer Languages
%V 6
%N 1
%P 47-57
%D January 1981

%T How to Call Procedures, or Second Thoughts on
Ackermann's Function
%A B.A. Wichmann
%J Software - Practice and Experience
%V 7
%P 317-329
%D 1977

%T Register Allocation Via Usage Counts
%A R.A. Freiburghouse
%J CACM
%V 17
%N 11
%P 638-642
%D November 1974

%T Machine-independent register allocation
%A R.L. Sites
%J SIGPLAN Notices
%V 14
%N 8
%P 221-225
%D August 1979

%T An Overview of the Production-Quality Compiler-Compiler Project
%A B.W. Leverett
%A R.G.G Cattell
%A S.O. Hobbs
%A J.M. Newcomer
%A A.H. Reiner
%A B.R. Schatz
%A W.A. Wulf
%J IEEE Computer
%V 13
%N 8
%P 38-49
%D August 1980

%T An Overview of the Production-Quality Compiler-Compiler Project
%A B.W. Leverett
%A R.G.G Cattell
%A S.O. Hobbs
%A J.M. Newcomer
%A A.H. Reiner
%A B.R. Schatz
%A W.A. Wulf
%R CMU-CS-79-105
%I Carnegie-Mellon University
%C Pittsburgh
%D 1979

%T Topics in Code Generation and Register Allocation
%A B.W. Leverett
%R CMU-CS-82-130
%I Carnegie-Mellon University
%C Pittsburgh
%D 28 July 1982

%T Predicting the Effects of Optimization on a Procedure Body
%A J.E. Ball
%J SIGPLAN Notices
%V 14
%N 8
%P 214-220
%D August 1979

%T The C Language Calling Sequence
%A S.C. Johnson
%A D.M. Ritchie
%I Bell Laboratories
%C Murray Hill, New Jersey
%D September 1981

%T A Generalization of Two Code Ordering Optimizations
%A C.W. Fraser
%R TR 82-11
%I Department of Computer Science
%C The University of Arizona, Tucson
%D October 1982

%T A Survey of Data Flow Analysis Techniques
%A K. Kennedy
%B Program Flow Analysis
%E S.S. Muchnick and  D. Jones
%I Prentice-Hall
%C Englewood Cliffs
%D 1981

%T Delayed Binding in PQCC Generated Compilers
%A W.A. Wulf
%A K.V. Nori
%R CMU-CS-82-138
%I Carnegie-Mellon University
%C Pittsburgh
%D 1982

%T Interprocedural Data Flow Analysis in the presence
of Pointers, Procedure Variables, and Label Variables
%A W.E. Weihl
%J Conf. Rec. of the 7th ACM Symp. on Principles of
Programming Languages
%C Las Vegas, Nevada
%P 83-94
%D 1980

%T Low-Cost, High-Yield Code Optimization
%A D.R. Hanson
%R TR 82-17
%I Department of Computer Science
%C The University of Arizona, Tucson
%D November 1982

%T Program Flow Analysis
%E S.S. Muchnick and  D. Jones
%I Prentice-Hall
%C Englewood Cliffs
%D 1981

%T A machine independent algorithm for code generation and its
use in retargetable compilers
%A R. Glanville
%R Ph.D. thesis
%C University of California, Berkeley
%D December 1977

%T A formal framework for the derivation of machine-specific optimizers
%A R. Giegerich
%J TOPLAS
%V 5
%N 3
%P 478-498
%D July 1983

%T Engineering a compiler: Vax-11 code generation and optimization
%A P. Anklam
%A D. Cutler
%A R. Heinen
%A M. MacLaren
%I Digital Equipment Corporation
%D 1982

%T Analyzing exotic instructions for a retargetable code generator
%A T.M. Morgan
%A L.A. Rowe
%J SIGPLAN Notices
%V 17
%N 6
%P 197-204
%D June 1982

%T TCOLAda and the Middle End of the PQCC Ada Compiler
%A B.M. Brosgol
%J SIGPLAN Notices
%V 15
%N 11
%P 101-112
%D November 1980

%T Implementation Implications of Ada Generics
%A G. Bray
%J Ada Letters
%V III
%N 2
%P 62-71
%D September 1983

%T Attributed Linear Intermediate Representations for Retargetable
Code Generators
%A M. Ganapathi
%A C.N. Fischer
%J Software-Practice and Experience
%V 14
%N 4
%P 347-364
%D April 1984

%T UNCOL: The myth and the fact
%A T.B. Steel
%J Annu. Rev. Autom. Program.
%V 2
%D 1960
%P 325-344

%T Experience with a Graham-Glanville Style Code Generator
%A P. Aigrain
%A S.L. Graham
%A R.R. Henry
%A M.K. McKusick
%A E.P. Llopart
%J SIGPLAN Notices
%V 19
%N 6
%D June 1984
%P 13-24

%T Using Dynamic Programming to generate Optimized Code in a
Graham-Glanville Style Code Generator
%A T.W. Christopher
%A P.J. Hatcher
%A R.C. Kukuk
%J SIGPLAN Notices
%V 19
%N 6
%D June 1984
%P 25-36

%T Peep - An Architectural Description Driven Peephole Optimizer
%A R.R. Kessler
%J SIGPLAN Notices
%V 19
%N 6
%D June 1984
%P 106-110

%T Automatic Generation of Peephole Optimizations
%A J.W. Davidson
%A C.W. Fraser
%J SIGPLAN Notices
%V 19
%N 6
%D June 1984
%P 111-116

%T Analysing and Compressing Assembly Code
%A C.W. Fraser
%A E.W. Myers
%A A.L. Wendt
%J SIGPLAN Notices
%V 19
%N 6
%D June 1984
%P 117-121

%T Register Allocation by Priority-based Coloring
%A F. Chow
%A J. Hennessy
%J SIGPLAN Notices
%V 19
%N 6
%D June 1984
%P 222-232
%V 19
%N 6
%D June 1984
%P 117-121

%T Code Selection through Object Code Optimization
%A J.W. Davidson
%A C.W. Fraser
%I Dept. of Computer Science
%C Univ. of Arizona
%D November 1981

%T A Portable Machine-Independent Global Optimizer - Design
and Measurements
%A F.C. Chow
%I Computer Systems Laboratory
%C Stanford University
%D December 1983
