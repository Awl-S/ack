%T The design of very fast portable compilers
%A A.S. Tanenbaum
%A M.F. Kaashoek
%A K.G. Langendoen
%A C.J.H. Jacobs
%J SIGPLAN Notices
%V 24
%N 11
%P 125-131
%D November 1989

%T A Programmer-friendly LL(1) Parser Generator
%A D. Grune
%A C.J.H. Jacobs
%J Software \- Practice and Experience
%V 18
%N 1
%P 29-38
%D January 1988

%T The Code Expander Generator
%A Frans Kaashoek
%A Koen Langendoen
%R IM-9
%I Vrije Universiteit, Amsterdam
%D November 1987

%T The ACK Pascal Compiler
%A Aad Geudeke
%A Frans Hofmeester
%R IM-8
%I Vrije Universiteit, Amsterdam
%D November 1987

%T The EM-interpreter
%A Eddo de Groot
%A Leo van den Berge
%R IM-7
%I Vrije Universiteit, Amsterdam
%D June 1987

%T A set of multi\-process primitives for stack based machines
%A K. Bot
%A E. Scheffer
%R IR-122
%I Vrije Universiteit, Amsterdam
%D December 1986

%T An Occam Compiler
%A K. Bot
%A E. Scheffer
%R IM-6
%I Vrije Universiteit, Amsterdam
%D December 1986

%T Language- and Machine-independent Global Optimization on Intermediate Code
%A H.E. Bal
%A A.S. Tanenbaum
%J Computer Languages
%V 11
%N 2
%P 105-121
%D April 1986

%T The ACK Target Optimizer
%A H.E. Bal
%R IR-107
%D 1985
%I Vrije Universiteit, Amsterdam

%T Some Topics in Parser Generation
%A C.J.H. Jacobs
%R IR-105
%D October 1985
%I Vrije Universiteit, Amsterdam

%T The CEM compiler
%A E.H. Baalbergen
%A D. Grune
%A M. Waage
%R IM-4
%I Vrije Universiteit, Amsterdam
%D 1985

%T The Design and Implementation of the EM Global Optimizer
%A H.E. Bal
%I Vrije Universiteit, Amsterdam
%R IR-99
%D March 1985

%T Does anybody out there want to write HALF of a compiler?
%A A.S. Tanenbaum
%A E.G. Keizer
%A H. van Staveren
%J Sigplan Notices
%V 19
%N 8
%P 106-108
%D August 1984

%T Amsterdam Compiler Kit documentation
%A A.S. Tanenbaum et. al.
%I Vrije Universiteit, Amsterdam
%R IR-90
%D June 1984

%T A Practical Toolkit for Making Portable Compilers
%A A. S. Tanenbaum
%A H. van Staveren
%A E. G. Keizer
%A J. W. Stevenson
%J Communications of the ACM
%V 26
%N 9
%P 654-660
%D September 1983

%T Description of a Machine Architecture for use with Block Structured
Languages
%A A. S. Tanenbaum
%A H. van Staveren
%A E. G. Keizer
%A J. W. Stevenson
%R IR-81
%D August 1983
%I Vrije Universiteit, Amsterdam

%T A Unix Toolkit for Making Portable Compilers
%A A.S. Tanenbaum
%A H. van Staveren
%A E.G. Keizer
%A J.W. Stevenson
%J Proceedings USENIX conf.
%C Toronto, Canada
%V 26
%D July 1983
%P 255-261

%T Using Peephole Optimization on Intermediate Code
%A A.S. Tanenbaum
%A J.M. van Staveren
%A J.W. Stevenson
%J TOPLAS
%V 4
%N 1
%P 21-36
%D January 1982

%T EM-1 Compiler
%A A.S. Tanenbaum
%J Pascal News
%D September 1981
%P 4-38

%T A portable compiler for the Proposed ISO Standard Pascal Language
%A A.S. Tanenbaum
%A J.W. Stevenson
%A H. van Staveren
%J Sigplan Notices
%V 15
%N 10
%D 1980

%T Implications of Structured Programming for Machine Architecture
%A A.S. Tanenbaum
%J CACM
%V 21
%N 3
%P 237-246
%D March 1978

%T The table driven code generator from the Amsterdam Compiler Kit (Second
revised edition)
%A H. van Staveren
%I Vrije Universiteit, Amsterdam
%R on-line internal ACK documentation
%D early 1985

%T Dhrystone Benchmark: Rationale for Version 2 and Measurement Rules
%A R.P. Weicker
%J Sigplan Notices
%V 23
%N 8
%D august 1988
%P 49-62
