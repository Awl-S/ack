.\" $Header$
.if n .nr PD 1v
.if n .nr LL 78m
.if n .ll 78m
.TL
Amsterdam Compiler Kit Installation Guide
.AU
Ed Keizer
(revised for 3rd, 4th and 5th distribution by Ceriel Jacobs)
.AI
Vakgroep Informatica
Vrije Universiteit
Amsterdam
.NH
Introduction
.PP
This document
describes the process of installing Amsterdam Compiler Kit.
It depends on your combination of hard- and software how
hard it will be to install the Kit.
This description is intended for a Sun-3 workstation.
Installation on VAXen running Berkeley Unix or Ultrix,
Sun-2 or Sun-4 systems and most System V 
.UX
systems should be easy.
As of this distribution, installation on PDP-11's or other
systems with a small address space is no longer supported.
See section 7 for installation on other systems.
.NH
The ACK installation process
.PP
Before starting the installation, you have to know some things about the
installation process. In this process, three directory trees are used:
.IP "-"
the ACK source tree. This is the tree on the ACK distribution medium.
For the rest of this document, we will refer to this directory 
as $SRC_HOME;
.IP "-"
a configuration tree. This tree is built by the installation process and
is used to do compilations. Its structure reflects that of the source tree,
but this tree will mostly contain Makefiles and relocatable objects.
For the rest of this document, we will refer to this directory 
as $CONFIG;
.IP "-"
an ACK users tree. This tree is also built by the installation process.
For the rest of this document, we will refer to this directory 
as $TARGET_HOME;
.LP
After installation,
the directories in the ACK users tree contain the following information:
.if n .sp 1
.if n .nr PD 0
.IP "bin" 14
the few utilities that knot things together.
See the section about "Commands".
.IP "lib"
root of a tree containing almost all libraries used by
commands.
All files specific to a certain machine are collected in one subtree
per machine. E.g. "lib/pdp", "lib/z8000".
The names used here are the same names as used for subtrees
of "$SRC_HOME/mach".
.IP "lib/descr"
Command descriptor files used by the program ack.
.IP "lib/LLgen"
Files used by the LL(1) Parser-generator.
.IP "lib/flex"
Files used by the lexical analyser generator Flex.
.IP "lib/m2"
Definition modules for Modula-2.
.IP "lib.bin"
root of a tree containing almost all binaries used by
commands.
All programs specific to a certain machine are collected in one subtree
per machine. E.g. "lib.bin/pdp", "lib.bin/z8000".
The names used here are the same names as used for subtrees
of "$SRC_HOME/mach".
.IP "lib.bin/ego"
Files used by the global optimizer.
.IP "lib.bin/lint"
Binaries for the lint passes and lint libraries.
.IP "lib.bin/ceg"
Files used by the code-expander-generator.
.IP "etc"
Contains the file "ip_spec.t" needed for EM interpreters and EM documentation.
.IP "config"
contains two include files:
.TS
l l.
em_path.h	Pathnames used by \fIack\fP, intended
	for all utilities
local.h	Various definitions for local versions
.TE
These include files are specific for the current machine, so they
are in a separate directory.
.IP "include/_tail_cc"
.br
Include files needed by modules
in the C library from lang/cem/libcc.
Especially needed for "stdio".
.IP "include/tail_ac"
.br
Include files for ANSI C.
.IP "include/occam"
Include files for occam.
.IP "include/_tail_mon"
.br
More or less system independent include files needed by modules
in the library lang/cem/libcc/mon.
.IP "h"
The #include files for:
.TS
l l.
arch.h	Definition of the ACK archive format
as_spec.h	Used by EM assembler and interpreters
bc_io.h	Used by the Basic run-time system
bc_string.h	Used by the Basic run-time system
cg_pattern.h	Used by the backend program "cg" and its bootstrap
cgg_cg.h	Used by the backend program "ncg" and its bootstrap
em_abs.h	Contains trap numbers and address for lin and fil
em_ego.h	Definition of names for some global optimizer messages
em_flag.h	Definition of bits in array em_flag in lib.bin/em_data.a
	Describes parameters effect on flow of instructions
em_mes.h	Definition of names for mes pseudo numbers
em_mnem.h	instruction => compact mapping.
em_pseu.h	pseudo instruction => compact mapping
em_ptyp.h	Useful for compact code reading/writing,
	defines classes of parameters
em_reg.h	Definition of mnemonics indicating register type
em_spec.h	Definition of constants used in compact code
ip_spec.h	Used by programs that read e.out files
m2_traps.h	Used by the Modula-2 run-time system
ocm_chan.h	Used by the occam run-time system
ocm_parco.h	Used by the occam run-time system
ocm_proc.h	Used by the occam run-time system
out.h	Defines the ACK a.out format
pc_err.h	Definitions of error numbers in Pascal
pc_file.h	Macro's used in file handling in Pascal
pc_size.h	Sizes of objects used by Pascal compiler and
	run-time system
pc_math.h	Used by the Pascal runtime system
ranlib.h	Defines symbol table format for archives
stb.h	Defines debugger symbol table types
.TE
.IP "modules"
root of a tree containing modules for compiler writers.
.IP "modules/man"
manual pages for all modules.
.IP "modules/lib"
contains module objects.
.IP "modules/h"
include files for some of the modules.
.IP "modules/pkg"
include files for some of the modules.
.IP "doc"
This directory contains the unformatted documents for the Kit.
A list of the available documents can be found in the last section.
.IP "doc/em"
The EM-manual IR-81.
.IP "doc/em/int"
The EM interpreter written in Pascal.
.IP "man"
Man files for various utilities
.if n .nr PD 1v
.LP
If you have a shared file system and want to install ACK on several types
of machines, it may be useful to know that the "doc", "etc", "h",
"include", "lib" and "man" sub-directories do not depend on this
particular installation. They do not contain binaries or path-dependent
information. These directories can therefore be shared between the
ACK installations. This can be accomplished by creating the tree and
suitable symbolic links before starting the installation process.
.LP
For instance, let us say you have a file-system that is accessible from 
the different machines as "/usr/share/local". You can then create a
directory "/usr/share/local/ack", and give it subdirectories "doc", "etc", "h",
"include", "lib" and "man". Also, let us assume that you want the
ack binary tree in "/usr/local/ack". You can create this directory and
then create symbolic links "doc" to "/usr/share/local/ack/doc", etc.
.LP
If you do this on all machines on which ACK will be installed, the
machine-independent part only has to be installed once, preferably
on the fastest processor (it takes a long time to install all libraries).
.LP
The directories in the source tree contain the following information:
.if n .sp 1
.if n .nr PD 0
.IP "bin" 14
source of some shell-scripts.
.IP "lib"
mostly description files for the "ack" program.
.IP "etc"
The main description of EM sits here.
Files (e.g. em_table) describing
the opcodes and pseudos in use,
the operands allowed, effect in stack etc. etc.
.IP "mkun"
The PUBMAC macro package for nroff/troff from the Katholieke Universiteit at
Nijmegen.
It is used for the EM reference manual.
The Makefile installs the macro package in
/usr/lib/tmac.
This package is in the public domain.
.IP "mach"
just there to group the directories with all sources for each machine.
The section about "Machines" of this manual indicates which subdirectories
are used for which systems.
.br
These directories have subdirectories named:
.in +3n
.TS
l l.
cg	the backend   (*.m => *.s)
ncg	the new backend   (*.m => *.s)
as	the assembler (*.s => *.o) or
	assembler/linker (*.s + libraries => a.out)
cv	Conversion programs for a.out files.
dl	Down-load programs
top	the target optimizer

libem	Sources for EM runtime system, only depending on CPU type
libbc	Used to create Basic run-time system and libraries
libcc	Used to create C run-time system and libraries
libpc	Used to create Pascal run-time system and libraries
liboc	Used to create Occam run-time system and libraries
libm2	Used to create Modula-2 run-time system and libraries
libf77	Used to create Fortran run-time system and libraries
libfp	Used to create floating point library
libdb	Used to create debugger support library
libsys	Sources for system-dependent EM library
test	Various tests

int	Source for an interpreter

ce	code expander (fast back-end producing either .s or .o files)
.TE
.in -3n
Actually, some of these directories will only appear in the configuration tree.
.br
The directory proto contains files used by most machines,
like machine-independent sources and Makefiles.
.in +3n
.TS
l l.
mach/proto/cg	Current backend sources.
mach/proto/ncg	New backend sources.
mach/proto/as	Assembler sources.
mach/proto/top	Target optimizer sources.
mach/proto/fp	Floating point package sources.
mach/proto/libg	Makefile for compiling libraries.
mach/proto/grind	machine-independent debugger support
.TE
.IP "emtest"
Contains prototype of em test set.
.IP "lang"
Just there to group the directories for all front-ends
.IP "lang/pc"
Pascal front-end
.IP "lang/pc/libpc"
.br
Source of Pascal run-time system (in EM or C)
.IP "lang/pc/test"
Some test programs written in Pascal
.IP "lang/pc/comp"
The Pascal compiler proper
.IP "lang/cem"
C front-end
.IP "lang/cem/libcc"
.br
Directories with sources of C runtime system, libraries (in EM or C)
.IP "lang/cem/libcc/gen"
.br
Sources for routines in chapter III of 
.UX
programmers manual,
excluding Stdio
.IP "lang/cem/libcc/stdio"
.br
Stdio sources
.IP "lang/cem/libcc/math"
.br
Sources for mathematical routines, normally available with the
\fB-lm\fP option to \fIcc\fP
.IP "lang/cem/libcc/mon"
.br
Sources for routines in chapter II, written in EM
.IP "lang/cem/cemcom"
.br
The compiler proper
.IP "lang/cem/cemcom.ansi"
.br
ANSI C compiler proper
.IP "lang/cem/cpp.ansi"
.br
ANSI C preprocessor
.IP "lang/cem/libcc.ansi"
.br
ANSI C library sources
.IP "lang/cem/ctest"
.br
C test set
.IP "lang/cem/ctest/cterr"
.br
Programs developed for pinpointing previous errors
.IP "lang/cem/ctest/ct*"
.br
The test programs
.IP "lang/cem/lint"
A C program checker
.IP "lang/cem/lint/lpass1"
.br
The first pass of lint
.IP "lang/cem/lint/lpass1.ansi"
.br
The first pass of lint, this time for ANSI C
.IP "lang/cem/lint/lpass2"
.br
The second pass of lint, shared between ANSI C and "old-fashioned" C
.IP "lang/cem/lint/llib"
.br
Programs for producing lint libraries
.IP "lang/basic"
Basic front-end
.IP "lang/basic/src"
.br
The compiler proper
.IP "lang/basic/lib"
.br
Basic run-time library source
.IP "lang/basic/test"
.br
Various Basic programs
.IP "lang/occam"
Occam front-end
.IP "lang/occam/comp"
.br
The compiler proper
.IP "lang/occam/lib"
.br
Source of Occam run-time system (in EM or C)
.IP "lang/occam/test"
.br
Some Occam programs
.IP "lang/m2"
Modual-2 front-end
.IP "lang/m2/comp"
The compiler proper
.IP "lang/m2/libm2"
Source of Modula-2 run-time system (in EM, C and Modula-2)
.IP "lang/m2/m2mm"
Modula-2 makefile generator
.IP "lang/m2/test"
Some Modula-2 example programs
.IP "lang/fortran"
Fortran front-end (translates fortran into C). The stuff in this
sub-directory carries the following copyright notice:
.IP ""
.nf
/****************************************************************
Copyright 1990, 1991 by AT&T Bell Laboratories and Bellcore.

Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that the copyright notice and this
permission notice and warranty disclaimer appear in supporting
documentation, and that the names of AT&T Bell Laboratories or
Bellcore or any of their entities not be used in advertising or
publicity pertaining to distribution of the software without
specific, written prior permission.
   
AT&T and Bellcore disclaim all warranties with regard to this
software, including all implied warranties of merchantability
and fitness.  In no event shall AT&T or Bellcore be liable for
any special, indirect or consequential damages or any damages
whatsoever resulting from loss of use, data or profits, whether
in an action of contract, negligence or other tortious action,
arising out of or in connection with the use or performance of
this software.
****************************************************************/
.fi
.IP "lang/fortran/comp"
.br
The compiler proper
.IP "lang/fortran/lib"
.br
Source of fortran runtime system and libraries.
.IP "util"
Contains directories with sources for various utilities
.IP "util/ack"
The program used for translation with the Kit
.IP "util/opt"
EM peephole optimizer (*.k => *.m)
.IP "util/ego"
The global optimizer
.IP "util/topgen"
The target optimizer generator
.IP "util/misc"
Decode (*.[km] => *.e) + encode (*.e => *.k).
.IP "util/data"
The C-code for `lib.bin/em_data.a`.
These sources are created by the Makefile in `etc`.
.IP "util/ass"
The EM assembler (*.[km] + libraries => e.out).
.IP "util/arch"
The archivers to be used for ALL EM utilities.
.IP "util/cgg"
A program needed for compiling backends.
.IP "util/ncgg"
A program needed for compiling the newest backends.
.IP "util/cpp"
The C preprocessor.
.IP "util/shf"
Various shell files.
.IP "util/LLgen"
The extended LL(1) parser generator.
.IP "util/amisc"
Contains some programs handling ACK a.out format, such as anm, asize.
.IP "util/cmisc"
Contains some programs to help in resolving name conflicts, and
a dependency generator for makefiles.
.IP "util/led"
The ACK link-editor, reading ACK relocatable a.out format, and writing
ACK a.out format.
.IP "util/int"
An EM interpreter, written in C. Very useful for checking out software,
but slow.
.IP "util/ceg"
Code expander generator.
.IP "util/grind"
A symbolic debugger.
.IP "util/byacc"
This is Berleley yacc, in the public domain.
.IP "util/flex"
This is a replacement for lex. It carries the following copyright notice:
.IP ""
.nf
Copyright (c) 1990 The Regents of the University of California.
All rights reserved.

This code is derived from software contributed to Berkeley by
Vern Paxson.

The United States Government has rights in this work pursuant
to contract no. DE-AC03-76SF00098 between the United States
Department of Energy and the University of California.

Redistribution and use in source and binary forms are permitted
provided that: (1) source distributions retain this entire
copyright notice and comment, and (2) distributions including
binaries display the following acknowledgement:  ``This product
includes software developed by the University of California,
Berkeley and its contributors'' in the documentation or other
materials provided with the distribution and in all advertising
materials mentioning features or use of this software.  Neither the
name of the University nor the names of its contributors may be
used to endorse or promote products derived from this software
without specific prior written permission.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.
.fi
.ne 4
.if n .nr PD 1v
.LP
All pathnames mentioned in the text of this document are relative to the
ACK source directory, unless they start with '/' or one of $SRC_HOME,
$TARGET_HOME or $CONFIG.
.NH
Restoring the ACK tree
.PP
The process of installing the Amsterdam Compiler Kit is quite simple.
The first step is to restore the Amsterdam Compiler Kit
distribution tree structure.
Proceed as follows
.IP "  \-" 10
Create a directory, for example /usr/em, on a device
with at least 12 Megabytes left. This directory will be $SRC_HOME.
.IP "  \-"
Change to that directory (cd ...).
.IP "  \-"
Extract all files from the distribution medium, for instance
magtape:
\fBtar x\fP.
.IP "  \-"
Keep a copy of the original distribution to be able to repeat the process
of installation in case of disasters.
This copy is also useful as a reference point for diff-listings.
.NH
Adapting ACK to your system
.PP
Before compiling the sources in the Kit some installation dependent
actions have to be taken.
Most of these are performed by an interactive shell script in the file
.I $SRC_HOME/first/first.
If you don't want to write in the $SRC_HOME tree you can call this
script from another directory, f.i. an empty directory which will later
become $CONFIG.
.LP
The actions of the
.I first
script are:
.if n .sp 1
.if n .nr PD 0
.IP \-
Asking you for the pathnames of the ACK source directory, the
configuration directory, and the ACK users directory.
.IP \-
Asking you for the type of system you have
and creating the shell script "ack_sys" in the Kit's bin directory.
Several utilities make use of "ack_sys" to determine the type of
system you have.
The current choice is between:
.TS
c c c
l l l.
answer	system type	default machine
vax_bsd4_1a	VAX11 with BSD4.1a	vax4
vax_bsd4_2	VAX11 with BSD4.2	vax4
vax_sysV_2	VAX11 with System V.2	vax4
i386	Intel 80386 system running Xenix System V	i386
sun3	Sun-3 Motorola 68020 workstation	sun3
sun2	Sun-2 Motorola 68010 workstation	sun2
m68_sysV_0	68000 with Uniplus UNIX System V.0	mantra
m68020	Motorola M68020 VME131
	running Unix System V/68 R2V2.1	m68020
sparc	Sun-4 or SPARC workstation	sparc
ANY	Neither of the above	???
.TE
For some of these, the installation procedure has not been tested, as
we don't have them.
For others, the installation procedure has only been tested with earlier
distributions, as we don't have those systems anymore.
However,
the vax_bsd4_2, sun3 and sparc systems are known to behave
reasonably.
The Sun systems should run SunOs Release 3.0 or newer.
For ANY you can use any name you fancy,
but the Kit will not be able to compile programs for your system.
If you want to do that you have to read the section about "compilation
on a different machine".
.IP \-
Setting the default machine for which code is
produced to your own type of system according to the table above.
This in done in the file "$TARGET_HOME/config/local.h".
See also the section 9.1.
.IP \-
Asking you for things that you may not want to install.
.IP \-
Producing a shell script called "INSTALL" that will take care of the
ACK installation process.
.if n .sp 1
.if n .nr PD 1v
.LP
Some actions still have to be done by hand.
.if n .sp 1
.if n .nr PD 0
.IP \-
The installation of the PUBMAC macro package is not done
automatically because you need super-user privileges to do
that on most systems.
This macro package is used with several of the documents
provided in the Kit.
.IP \-
The manual files for the Kit can be copied to their
appropriate place in the system by giving the command "make install"
in the $TARGET_HOME/man directory, but only 
.B after
running the installation of the
Kit itself.
.if n .sp 1
.if n .nr PD 0
.NH
Compiling the Kit
.PP
The next step in the installation process is to run the "INSTALL"
shell-script:
.DS
sh INSTALL > INSTALL.out 2>&1 &
.DE
This shell-script performs the following steps:
.if n .sp 1
.if n .nr PD 0
.IP \-
it will produce a configuration tree, reflecting the structure of the
source tree. 
.IP \-
Produce Makefiles in the configuration tree ($CONFIG).
As mentioned before, compilations
will be done in the configuration tree, not in the source tree.
Most configuration directories will have Makefiles
used to compile and install the programs in that
directory.
All programs needed for compilation and/or cross compilation
with the Kit are installed in $TARGET_HOME by these Makefiles.
These Makefiles are produced from corresponding files called
"proto.make" in the source tree. In fact, the "proto.make" files
are almost complete Makefiles, except for some macro definitions that
are collected by the \fIfirst\fP script.
The Makefiles adhere to a standard which is described in the
section 9.
.IP \-
Copy "Action" files to the configuration tree and editing them to
reflect your choices concerning the parts of ACK that you want
to install.  "Action" files are described below.
.IP \-
Copy part of the source tree to de ACK users tree (include files, 
manual pages, documentation, et cetera).
.IP \-
Calling the "TakeAction" script.
You do not have to start all the Makefiles separately.
We wrote a shell script calling the make's needed to install
the whole Kit.
This script consists of the file $SRC_HOME/TakeAction
and a few files called Action in some configuration directories.
The Action files describe in a very simple form which actions
have to be performed in which directories.
The default action is to start "make install && make clean".
The output of each make is diverted to a file called "Out"
in the same directory as the make was started in.
If the make was successful (return code 0) the Out file is removed
and the script TakeAction produces a small message telling you
that it succeeded in fulfilling its goal.
If the make was not successful (any other return code) the Out file
is left alone for further examination and a small message telling you
to look at that file is produced by TakeAction.
.br
For some programs the scripts already know they can't be
installed on your type of system.
In that case they produce a message "Sorry, ....." and
happily proceed with further installation commands.
.if n .sp 1
.if n .nr PD 1v
.LP
Compilation of the whole Kit might take anything from a few
hours to more than a day, depending on the speed of your machine and
your choices.
.LP
If this compilation went reasonably successful you should be able
to use the Kit.
Read the next section and the manuals provided
with the Kit (in the $TARGET_HOME/man directory) on how to use it.
.NH 2
Problems you may meet
.NH 3
on Unisoft m68000 systems.
.PP
The Unisoft C compiler has a bug which impedes the correct
translation of the peephole optimizer.
For a more detailed description of this phenomenen see
the file "$SRC_HOME/mach/m68k2/Unisoft_bug".
.NH 3
with backends
.PP
The backends for the PDP11, VAX, Motorola 68000 and 68020,
Intel 8086, and Intel 80386
have been heavily used by ourselves and are well tested.
The backends for the other machines are known to run our own
test programs,
but might reveal errors when more heavily used.
.NH 2
An example output of TakeAction.
.LP
.sp 1
.nf
    System definition -- done
    EM definition library -- done
    C utilities -- done
    Flex lexical analyzer generator -- done
    Yacc parser generator -- done
    system-call interface module -- done
        .
        .
        .
    EM Global optimizer -- done
    ACK archiver -- done
    Program 'ack' -- done
    Bootstrap for backend tables -- done
    Bootstrap for newest form of backend tables -- done
        .
        .
        .
    C frontend -- done
    ANSI-C frontend -- done
    ANSI-C preprocessor -- done
    ANSI-C header files -- done
    Failed for LINT C program checker, see lang/cem/lint/Out
    Pascal frontend -- done
    Basic frontend -- done
        .
        .
        .
    Vax 4-4 assembler -- done
    Vax 4-4 backend -- done
    Vax target optimizer -- done
    ACK a.out to VAX a.out conversion program -- done
    Sorry, Vax code expander library can only be made on vax* systems
    Vax 4-4 EM library -- done
    Vax 4-4 debugger support library -- done
    Vax 4-4 etext,edata,end library -- done
    Vax 4-4 systemcall interface -- done
        .
        .
        .
.sp 1
.fi
.LP
The lines starting with "Sorry, " tell you that certain programs cannot
be translated on your machine.
The lines starting with "Failed for" tell
you that certain programs/libraries were expected to,
but did not compile.
In this example, the installation of LINT failed.
If you want to repeat a certain part of the installation, look in
the Action file, which resides in the root of the configuration tree,
for the directory in which that part is to be found.
If that directory contains an Action file issue the command
"sh $SRC_HOME/TakeAction", otherwise type "make install".
.NH
Commands
.PP
The following commands are available in the $TARGET_HOME/bin directory after compilation
of the Kit:
.IP "\fIack\fP, \fIacc\fP, \fIabc\fP, \fIapc\fP, \fIocm\fP, \fIm2\fP, \fIf2c\fP  and their links" 14
.br
The names mentioned here can be used to compile Pascal, C, etc... programs.
Most of the links can be used to generate code for a particular
machine.
See also the section about "Machines".
.IP \fIarch\fP
The archiver used for the EM- and universal assembler/loader.
.IP \fIaal\fP
The archiver used for ACK objects.
.IP \fIem\fP
This program selects a interpreter to execute an e.out file.
Interpreters exist for PDP-11 and Motorola 68000 systems.
.IP \fIeminform\fP
The program to unravel the post-mortem information of
the EM interpretator for the PDP-11.
.IP \fILLgen\fP
The LL(1) parser generator.
.IP \fIack_sys\fP
A shell script producing an identification of your system.
Used by some utilities to determine what is, and what is
not feasible on your system.
.IP \fImarch\fP
A shell script used while compiling libraries.
.IP "\fIasize\fP, \fIanm\fP, \fIastrip\fP"
.br
Do the same as \fIsize\fP, \fInm\fP and \fIstrip\fP, but for ACK object format.
.IP \fImkdep\fP
A dependency generator for makefiles.
.IP "\fIcid\fP, \fIprid\fP, \fIcclash\fP"
.br
Some utilities for handling name clashes in C programs. Some
systems have C-compilers with only 7 or 8 characters significant in
identifiers.
.IP "\fItabgen\fP
A utility for generating character tables for C-programs.
.IP \fIint\fP
An EM interpreter. This one is written in C, and is very useful for checking
out programs.
.IP "\fIgrind\fP
A source level debugger for ANSI-C, Modula-2 and Pascal.
.LP
We currently make the Kit available to our users by telling
them that they should include the $TARGET_HOME/bin directory in
their PATH shell variable.
The programs will still work when moved to a different
directory or linked to.
Copying should preferably be done with tar, since links are
heavily used.
Renaming of the programs linked to \fIack\fP will not always
produce the desired result.
This program uses its call name as an argument.
Any call name not being \fIcc\fP, \fIacc\fP, \fIabc\fP, \fIpc\fP, \fIf2c\fP,
\fIocm\fP, \fIm2\fP, or \fIapc\fP will be
interpreted as the name of a 'machine description' and the
program will try to find a description file with that name.
The installation process will only touch the utilities in the $TARGET_HOME/bin
directory, not your own copies.
.NH
Machines
.PP
Underneath you will find a table with entries for all commands in
the bin directory used to (cross)compile for a particular machine.
The name in the first column give the name in the bin directory.
The column headed dir indicates which subdirectories of
lib are needed for compilation.
The column head i/p contains the integer and pointer size used in units of
bytes.
The subdirectories with the same name in mach contain the sources.
A * in the column headed 'fp' indicates that floating point can be used
for that particular machine. A + in that column indicates that floating
point is only available under the '-fp' option. In this case, software
floating point emulation is used.
.TS
l l l l l l l.
command	system	i/p	languages	fp	dir	remarks

pdp	PDP/UNIX V7	2/2	C	*	pdp
			Pascal
			Basic
			Occam
			Modula-2

vax4	VAX/BSD 4.?	4/4	C	*	vax4
	System V.2		Pascal
			Basic
			Occam
			Modula-2
			Fortran

sparc	Sun-4	4/4	C	*	sparc
			Pascal
			Basic
			Occam
			Modula-2
			Fortran

m68k2	M68000/Unisoft	2/4	C	+	m68k2
			Pascal
			Basic
			Occam
			Modula-2

m68k4	M68000/Unisoft	4/4	C	+	m68k4
			Pascal		m68k2
			Basic
			Occam
			Modula-2
			Fortran

pmds	M68000/PMDS	2/4	C	+	pmds	Philips Micro
			Pascal		m68k2	Devel. System
			Basic
			Occam
			Modula-2

pmds4	M68000/PMDS	4/4	C	+	pmds4	Philips Micro
			Pascal		m68k2	Devel. System
			Basic		m68k4
			Occam
			Modula-2
			Fortran

mantra	M68000/SysV.0	4/4	C	+	mantra
			Pascal		m68k2
			Basic		m68k4
			Occam
			Modula-2
			Fortran

m68020	M68020/V/68	4/4	C	+	m68020
	R2V2.1		Pascal
			Basic
			Occam
			Modula-2
			Fortran

sun3	Sun-3 R3.0	4/4	C	+	sun3
			Pascal		m68020
			Basic
			Occam
			Modula-2
			Fortran

sun2	Sun-2 R3.0	4/4	C	+	sun2
			Pascal		m68k4
			Basic		m68k2
			Occam
			Modula-2
			Fortran

i86	IBM PC/IX	2/2	C	+	i86	IBM PC with PC/IX
			Pascal			Causes kernel crashes
			Basic
			Occam
			Modula-2

xenix3	Microsoft Xenix V3	2/2	C	+	xenix3	IBM AT with Xenix
			Pascal		i86
			Basic
			Occam
			Modula-2

i386	SCO Xenix System V	4/4	C	+	i386	Intel 80386, Xenix System V
			Pascal
			Basic
			Occam
			Modula-2
			Fortran

minix	Minix PC	2/2	C	+	minix	IBM PC running Minix
			Pascal		i86
			Basic
			Occam
			Modula-2

minixST	ST Minix	2/4	C	+	minixST	Atari ST running Minix
			Pascal		m68k2
			Basic
			Occam
			Modula-2

z8000	Zilog 8000	2/2	C		z8000	Central Data
			Pascal			CPU board
			Basic			Uses assembler/loader
			Occam
			Modula-2

em22	EM machine	2/2	C	*	em22	Needs interpreter
			Pascal
			Basic
			Occam
			Modula-2

em24	EM machine	2/4	C	*	em24	Needs interpreter
			Pascal
			Basic
			Occam
			Modula-2

em44	EM machine	4/4	C	*	em44	Needs interpreter
			Pascal
			Basic
			Occam
			Modula-2
			Fortran

6500	6502/BBC	2/2	C		6500	Uses assembler/loader
			Pascal
			Basic
			Occam
			Modula-2

6800	Bare 6800				6800	Assembler only

6805	Bare 6805				6805	Assembler only

6809	Bare 6809				6809	Assembler only

ns	Bare NS16032	4/4	C		ns
			Pascal
			Basic
			Occam
			Modula-2
			Fortran

i80	Hermac/z80	2/2	C		i80
			Pascal
			Basic
			Occam
			Modula-2

z80	Hermac/z80	2/2	C		z80	\fIi80\fP is faster
			Pascal
			Basic
			Occam
			Modula-2

s2650	Signetics 2650				s2650	Assembler only

arm	Acorn Archimedes	4/4	C	*	arm	Uses assembler/loader
			Pascal
			Basic
			Occam
			Modula-2
			Fortran
.TE
.LP
The commands \fBem22\fP, \fBem24\fP and \fBem44\fP
produce e.out files with EM machine code which must be interpreted.
The Kit contains three interpreters: one running under PDP 11/V7 UNIX,
one for the M68000, running under the PMDS system, Sun systems, 
the Mantra system, etc, and a portable one, written in C.
The first one can only interpret 2/2 e.out files,
the second takes 2/4 and 4/4 files,
and the last one takes 2/2, 2/4 and 4/4.
The PDP 11 interpreter executes floating point instructions.
.LP
The program \fB$TARGET_HOME/bin/em\fP calls the appropriate
interpreter.
The interpreters are looked for in the em22, em24 and em44
subdirectories of lib.
The third interpreter is available as the program \fB$TARGET_HOME/bin/int\fP
in the bin directory.
.NH
Compilation on a different machine.
.PP
The Kit be installed and used as a cross-compiler
for the languages it supports on
.UX
machine.
The presence of most 
.UX
utilities is essential for compilation.
A few of the programs you certainly need are: C-compiler, sed,
and make.
.NH 2
Backend
.PP
The existence of a backend with a system call library
for your system is essential
if you wish to produce executable files for that system.
Rewriting the system call library if the one supplied does
not work on your system is fairly straightforward.
If no backend exists for your CPU type you have to write one yourself
which is a major undertaking.
.NH 2
Universal assembler/loader, link editor
.PP
For most machines, the description files in $TARGET_HOME/lib/*/descr use our
universal assembler and our link editor.
The load file produced is not directly
usable in any system known to us,
but has to be converted before it can be put to use.
The \fIcv\fP programs convert our a.out format into
executable files.
The \fIdl\fP programs present for some machines unravel
our a.out files and transmit commands to load memory
to a microprocessor over a serial line.
The file $TARGET_HOME/man/ack.out.5 contains a description of the format of
the universal assembler load file.
It might be useful to those who wish or need to write their
own conversion programs.
Also, a module is included to read and write our a.out format.
See $TARGET_HOME/modules/man/object.3.
.NH 2
Compiling libraries
.PP
The Kit contains sources for part II and III of the C-library.
These files can be used to make libraries for the ACK C-compiler.
The recompilation process uses a few include files.
The $TARGET_HOME/include directory contains the include files
it needs.
An effort has been made to make the part III stuff as system independent as
possible.
.NH
Options
.NH 2
Default machine
.PP
There is one important option in $TARGET_HOME/config/local.h.
The utility \fIack\fP uses a default machine name when called
as \fIacc\fP, \fIcc\fP, \fIabc\fP, \fIapc\fP, \fIpc\fP, \fIocm\fP,
\fIm2\fP, \fIf2c\fP, or \fIack\fP.
The machine name used for default is determined by the
definition of ACKM in $TARGET_HOME/config/local.h.
The Kit is distributed with "sun3" as the default machine,
but the shell script "first" in the directory "first" alters this
to suit your own system.
There is nothing against using the Kit as a cross-compiler
and by default produce code that can't run on your own system.
.NH 2
Pathnames
.PP
Absolute pathnames are concentrated in "$TARGET_HOME/config/em_path.h".
Only the utilities \fIack\fP, \fIflex\fP, and \fILLgen\fP use
absolute pathnames to access files in the Kit.
The tree is distributed with /usr/em as the working
directory.
The definition of EM_DIR in em_path.h should be altered to
specify the root
directory for the Compiler Kit distribution on your system ($SRC_HOME).
This is done automatically by the shell script "first" in the
directory "first".
Em_path.h also specifies which directory should be used for
temporary files.
Most programs from the Kit do indeed use that directory
although some remain stubborn and use /tmp or /usr/tmp.
.LP
The shape of the tree should not be altered lightly because
most Makefiles and the
utility \fIack\fP know the shape of the ACK tree.
The knowledge of the utility \fIack\fP about the shape of the tree is
concentrated in the files in the directory $TARGET_HOME/lib/*/descr and $TARGET_HOME/lib/descr/*.
.NH
Makefiles
.PP
Most directories contain a "proto.make", from which a Makefile is derived.
Apart from commands applying to that specific directory these
files all recognize a few special commands.
When called with one of these they will apply the command to
their own directory and all subdirectories.
The special commands are:
.sp 1
.IP "install" 20
recompile and install all binaries and libraries.
.br
Some Makefiles allow errors to occur in the programs they call.
They ignore such errors and notify the user with the message
"~....... error code n: ignored".
Whenever such a message appears in the output you can ignore it
too.
.IP "cmp"
recompile all binaries and libraries and compare them to the
ones already installed.
.IP pr
print the sources and documentation on the standard output.
.IP opr
make pr | opr
.br
Opr should be an off-line printer daemon.
On some systems it exists under another name e.g. lpr.
The easiest way to call such a spooler is using a shell script
with the name opr that calls lpr.
This script should be placed in /usr/bin or $TARGET_HOME/bin or
one of the directories in your PATH.
.IP clean
remove all files not needed for day-to-day use,
that is binaries not in bin or lib, object files etc.
.LP
Example:
.DS
make install
.DE
given as command in the configuration directory will cause
compilation of all programs in the directory and copying of the results
to the bin and lib.bin directories.
.NH
Testing
.PP
Test sets are available in Pascal, C, Basic and EM assembly.
.IP em 8
The directory $SRC_HOME/emtest contains a few EM test programs.
The EM assembly files in these tests must be transformed into
load files.
These tests use the LIN and NOP instructions to mark the passing of each
test.
The NOP instruction prints the current line number during the
test phase.
Each test notifies its correctness by calling LIN with a unique
number followed by a NOP which prints this line number.
The test finishes normally with 0 as the last number printed
In all other cases a bug showed its
existence.
.IP Pascal
The directory $SRC_HOME/lang/pc/test contains a few Pascal test programs.
All these programs print the number of errors found and a
identification of these errors.
.sp 1
.ti +4
We also tested Pascal with the Validation Suite.
The Validation Suite is a collection of more than 200 Pascal programs,
designed by Brian Wichmann and Arthur Sale to test Pascal compilers.
We are not allowed to distribute it, but you may
request a copy from
.DS
Richard J. Cichelli
A.N.P.A.
1350 Sullivan Trail
P.O. Box 598
Easton, Pennsylvania 18042
USA
.DE
.IP C
The sub-directories in $SRC_HOME/lang/cem/ctest contain C test programs.
The idea behind these tests is:
when you have a program called xx.c, compile it into xx.cem.
Run it with standard output to xx.cem.r, compare this file to
xx.cem.g, a file containing the 'ideal' output.
Any differences will point to implementation differences or
bugs.
Giving the command "run gen" or plain "run" starts this
process.
The differences will be presented on standard output.
The contents of the result files depend on the wordsize,
the xx.cem.g files on the distribution are intended for a
32-bit machine.
.IP Basic
The directory $SRC_HOME/lang/basic/test contains some forty basic programs.
Not all of these programs are correct, some have syntactic errors,
some simply don't work.
The Makefile in that directory attempts to compile and run
these tests.
If it compiles its output is compared to a file with suffix .g
which contains the output to be expected.
The make should be started with its standard input diverted
to /dev/null.
An example of the output of a make is present in the file Out.std.
.NH
Documentation
.PP
Manual pages for Amsterdam Compiler Kit can be copied
to "/usr/man/man?" by the
following commands:
.DS
cd $TARGET_HOME/man
make install
.DE
but do this \fBafter\fR compiling the Kit.
.LP
Several documents are provided:
.TS
l l.
doc/toolkit.doc	general overview (CACM article)
doc/em	description of the EM machine architecture
doc/ack.doc	format of machine description files (lib/*/descr)
doc/ansi_C.doc	ANSI C implementation description
doc/basic.doc	Basic reference manual
doc/pcref.doc	Pascal-frontend reference manual
doc/val.doc	results of running the Pascal Validation Suite
doc/crefman.doc	C-frontend description
doc/LLgen	description of the LL(1) parser generator
doc/peep.doc	internal documentation for the peephole optimizer
doc/cg.doc	documentation for backend writers and maintainers
doc/regadd.doc	addendum to previous document describing register variables
doc/ncg.doc	documentation for the newest backends
doc/v7bugs.doc	bugs in the V7 system and how to fix them
doc/6500.doc	MSC 6500 backend description
doc/i80.doc	Intel 8080 backend description
doc/z80.doc	Zilog Z80 backend description
doc/m68020.doc	Motorola M68000/M68020 backend description
doc/sparc	SPARC code expander description
doc/occam	Occam-frontend description
doc/ego	Global Optimizer description
doc/top	Target Optimizer description
doc/int	description of the EM interpreter written in C
doc/ceg	documentation for code-expander writers and maintainers
doc/lint	documentation of LINT
doc/m2ref.doc	Modula-2 frontend description
doc/install.doc	this document
doc/install.pr	this document (formatted)
.TE
.LP
The names in this list without a suffix are in fact a subdirectory.
Use the Makefile to get readable copies.
.LP
Good luck.
