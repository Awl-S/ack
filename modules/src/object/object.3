.TH OBJECT 3 "$Revision$"
.ad
.SH NAME
wr_open, wr_close, wr_ohead, wr_sect, wr_outsect, wr_emit, wr_putc, wr_relo,
wr_name, wr_string, wr_arhdr, wr_ranlib, wr_int2, wr_long, wr_bytes,
rd_open, rd_fdopen, rd_close, rd_ohead, rd_sect, rd_outsect,
rd_emit, rd_relo, rd_rew_relo, rd_name, rd_string, rd_arhdr, rd_ranlib,
rd_int2, rd_unsigned2, rd_int4, rd_bytes, rd_fd\ \-\ routines to read
and write ACK-object files and libraries
.SH SYNOPSIS
.B #include <out.h>
.br
.B #include <arch.h>
.br
.B #include <ranlib.h>
.br
.B #include <object.h>
.PP
.B int wr_open(const char *filename)
.PP
.B void wr_close(void)
.PP
.B void wr_ohead(const struct outhead *head)
.PP
.B void wr_sect(const struct outsect *sect, unsigned int cnt)
.PP
.B void wr_outsect(int sectno)
.PP
.B void wr_emit(const char *emit, long cnt)
.PP
.B void wr_putc(int c)
.PP
.B void wr_relo(const struct outrelo *relo, unsigned int cnt)
.PP
.B void wr_name(const struct outname *name, unsigned int cnt)
.PP
.B void wr_string(const char *addr, long len)
.PP
.B void wr_arhdr(FILE* fd, struct ar_hdr *arhdr)
.PP
.B void wr_ranlib(FILE* fd, struct ranlib *ran, long cnt)
.PP
.B void wr_int2(FILE* fd, int i)
.PP
.B void wr_long(FILE* fd, long l)
.PP
.B void wr_bytes(FILE* fd, const char* buf, long cnt)
.PP
.B int rd_open(const char *filename)
.PP
.B int rd_fdopen(FILE* fd)
.PP
.B void rd_close(void)
.PP
.B void rd_ohead(struct outhead *head)
.PP
.B void rd_sect(struct outsect *sect, unsigned int cnt)
.PP
.B void rd_outsect(int sectno)
.PP
.B void rd_emit(char *emit, long cnt)
.PP
.B void rd_relo(struct outrelo *relo, unsigned int cnt)
.PP
.B void rd_rew_relos(struct outhead *head)
.PP
.B void rd_name(struct outname *name, unsigned int cnt)
.PP
.B void rd_string(char *stringaddr, long cnt)
.PP
.B int rd_arhdr(FILE* fd, struct ar_hdr *arhdr)
.PP
.B void rd_ranlib(FILE* fd, struct ranlib *ran, long cnt)
.PP
.B int rd_int2(FILE* fd)
.PP
.B unsigned int rd_unsigned2(FILE* fd)
.PP
.B long rd_int4FILE* fd)
.PP
.B void rd_bytes(FILE* fd, char *buf, long l)
.PP
.B FILE* rd_fd(void)
.SH DESCRIPTION
These routines come in handy when reading or writing ACK-object files
or libraries. No checking is performed.
.PP
.I wr_open
opens the file
.I filename
for writing and initializes some of this modules local variables.
It must be called before writing parts of the object file.
It returns 1 if it succeeds, 0 if it fails.
.PP
.I wr_close
closes the object file. Don't forget to call it, because it might
flush internal buffers.
.PP
.I wr_ohead
writes the
.I head
header structure.
This routine must be called before the routines to write the other
parts.
.PP
.I wr_sect
writes
.I cnt
section headers, starting at
.IB sect .
Before writing a section, its section header must be written.
.PP
.I wr_outsect
indicates that the next section to be written is
.IB secno .
This routine can be used to switch between sections.
.PP
.I wr_emit
writes
.I cnt
bytes, starting at
.IB emit ,
of the current section.
.PP
.I wr_putc
adds byte
.I ch
to the current section.
.PP
.I wr_relo
writes
.I cnt
outrelo structures, indicated by
.IB relo ,
in the relocation information part of the object file.
.PP
.I wr_name
writes
.I cnt
outname structures, indicated by
.IB name ,
in the name-table part of the object file.
.PP
.I wr_string
writes
.I cnt
bytes, indicated by
.IB addr,
in the string table part of the object file.
.PP
The next few routines can be used independantly:
.I wr_arhdr
writes the archive member header
.I arhdr
to file descriptor
.IB fd .
.PP
.I wr_ranlib
writes
.I cnt
ranlib structures, indicated by
.IB ran ,
to file descriptor
.IB fd.
.PP
.I wr_int2
writes a 2-byte integer
.I i
to file descriptor
.IB fd ,
low order byte first.
.PP
.I wr_long
writes a 4-byte integer
.I l
to file descriptor
.IB fd ,
low order word first, low order byte first.
.PP
.I wr_bytes
writes
.I cnt
bytes from
.I buf
to file descriptor
.IB fd .
.PP
Most of the
.I rd_
routines are the opposite of the
.I wr_
routines. However, a few of them deserve special mentioning:
.PP
.I rd_fdopen
initialises for reading an "object file" from file descriptor
.IB fd ,
at its current position.
This is useful for reading an object that resides in an archive.
It returns 1 if it succeeds, 0 otherwise.
When using this entry point for reading,
.I rd_close
does not have to be called.
.PP
.I rd_rew_relos
rewinds the relocation part, so that it can be read again.
\fILed\fR(6) sometimes needs this.
.PP
.I rd_unsigned2
reads two bytes from file descriptor
.I fd
and interprets them as an unsigned integer.
.PP
.I rd_arhdr
returns 1 if a header was read, and 0 on end-of-file.
.PP
When using any of the reading routines, a routine
named
.I rd_fatal
must be defined.
It is called when a read fails, and is not supposed to return.
Likewise, a routine
.I wr_fatal
must be defined when using any of the writing routines.
.SH FILES
~em/h/out.h
.br
~em/h/arch.h
.br
~em/h/ranlib.h
.br
~em/modules/lib/libobject.a: the library in which these routines reside
.SH "SEE ALSO"
ack.out(5), arch(1), aal(1)
.SH DIAGNOSTICS
The routines
.IB wr_open ,
.IB rd_open ,
and
.I rd_fdopen
return 0 if they fail, and 1 if they succeed.
