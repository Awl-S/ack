# $Header$
#	M A K E F I L E   F O R   A C K   C - C O M P I L E R

# Machine and environ dependent definitions
EMHOME = ../../..
CC = $(EMHOME)/bin/fcc
CC = cc
CFLOW = cflow
MKDEP = $(EMHOME)/bin/mkdep
PRID = $(EMHOME)/bin/prid
CID = $(EMHOME)/bin/cid

# Libraries and EM interface definitions
SYSLIB = $(EMHOME)/modules/lib/libsystem.a
EMKLIB = $(EMHOME)/modules/lib/libemk.a $(EMHOME)/lib/em_data.a
EMOLIB = $(EMHOME)/modules/lib/libemopt.a
EMELIB = $(EMHOME)/modules/lib/libeme.a $(EMHOME)/lib/em_data.a
STRLIB = $(EMHOME)/modules/lib/libstring.a
PRTLIB = $(EMHOME)/modules/lib/libprint.a
FLTLIB = $(EMHOME)/modules/lib/libflt.a
EMMESLIB = $(EMHOME)/modules/lib/libem_mes.a
EMMESOLIB = $(EMHOME)/modules/lib/libem_mesO.a
EMMESCELIB = $(EMHOME)/modules/lib/libem_mesCE.a
MACH = sun3
EMCELIB = $(EMHOME)/lib/$(MACH)/ce.a \
		$(EMHOME)/lib/$(MACH)/back.a \
		$(EMHOME)/modules/lib/libobject.a $(EMHOME)/lib/em_data.a
INPLIB = $(EMHOME)/modules/lib/libinput.a
ALLOCLIB = $(EMHOME)/modules/lib/liballoc.a
MALLOC = $(EMHOME)/modules/lib/malloc.o
LIBS = $(INPLIB) $(EMMESLIB) $(EMKLIB) $(PRTLIB) $(STRLIB) \
	$(ALLOCLIB) $(MALLOC) $(SYSLIB) $(FLTLIB)
ELIBS = $(INPLIB) $(EMMESLIB) $(EMELIB) $(PRTLIB) $(STRLIB) \
	$(ALLOCLIB) $(MALLOC) $(SYSLIB) $(FLTLIB)
OLIBS = $(INPLIB) $(EMMESOLIB) $(EMOLIB) $(EMKLIB) $(PRTLIB) $(STRLIB) \
	$(ALLOCLIB) $(MALLOC) $(SYSLIB) $(FLTLIB)
CELIBS = $(INPLIB) $(EMMESCELIB) $(EMCELIB) $(PRTLIB) $(STRLIB) \
	$(ALLOCLIB) $(MALLOC) $(SYSLIB) $(FLTLIB)
LLIBS = $(INPLIB) $(EMMESLIB) $(PRTLIB) $(STRLIB) \
	$(ALLOCLIB) $(MALLOC) $(SYSLIB) $(FLTLIB)
LIB_INCLUDES = -I$(EMHOME)/modules/h -I$(EMHOME)/modules/pkg
EM_INCLUDES = -I$(EMHOME)/h
SYSLLIB = $(EMHOME)/modules/lib/llib-lsystem.ln
EMKLLIB = $(EMHOME)/modules/lib/llib-lemk.ln
EMELLIB = $(EMHOME)/modules/lib/llib-leme.ln
STRLLIB = $(EMHOME)/modules/lib/llib-lstring.ln
PRTLLIB = $(EMHOME)/modules/lib/llib-lprint.ln
EMMESLLIB = $(EMHOME)/modules/lib/llib-lem_mes.ln
INPLLIB = $(EMHOME)/modules/lib/llib-linput.ln
ALLOCLLIB = $(EMHOME)/modules/lib/llib-lalloc.ln
#LINTLIBS =
LINTLIBS = $(EMMESLLIB) $(EMKLLIB) $(PRTLLIB) $(STRLLIB) $(ALLOCLLIB) $(SYSLLIB)
CURRDIR = 

COPTIONS =

# What parser generator to use and how
GEN = $(EMHOME)/bin/LLgen
GENOPTIONS = -vvvx

# tabgen
TABGEN = $(EMHOME)/bin/tabgen

# Special #defines during compilation
PROF = #-pg
CDEFS =	$(EM_INCLUDES) $(LIB_INCLUDES)
CFLAGS = $(CDEFS) $(COPTIONS) $(PROF) -O
LDFLAGS = -i $(PROF)

# Grammar files and their objects
LSRC =	tokenfile.g declar.g statement.g expression.g program.g ival.g
LCSRC =	tokenfile.c declar.c statement.c expression.c program.c Lpars.c ival.c
LOBJ =	tokenfile.o declar.o statement.o expression.o program.o Lpars.o ival.o

# Objects of hand-written C files
CSRC =	main.c idf.c declarator.c decspecs.c struct.c \
	expr.c ch3.c ch3bin.c cstoper.c fltcstoper.c arith.c \
	code.c dumpidf.c error.c field.c\
	tokenname.c LLlex.c LLmessage.c \
	input.c domacro.c replace.c init.c options.c \
	skip.c stack.c type.c ch3mon.c label.c eval.c \
	switch.c conversion.c util.c proto.c \
	pragma.c blocks.c dataflow.c Version.c \
	l_lint.c l_states.c l_misc.c l_ev_ord.c l_outdef.c l_comment.c l_dummy.c
COBJ =	main.o idf.o declarator.o decspecs.o struct.o \
	expr.o ch3.o ch3bin.o cstoper.o fltcstoper.o arith.o \
	code.o dumpidf.o error.o field.o\
	tokenname.o LLlex.o LLmessage.o \
	input.o domacro.o replace.o init.o options.o \
	skip.o stack.o type.o ch3mon.o label.o eval.o \
	switch.o conversion.o util.o proto.o \
	pragma.o blocks.o dataflow.o Version.o \
	l_lint.o l_states.o l_misc.o l_ev_ord.o l_outdef.o l_comment.o l_dummy.o

# Objects of other generated C files
GCSRC =	char.c symbol2str.c next.c
GOBJ =	char.o symbol2str.o next.o

STRSRC = code.str declar.str decspecs.str def.str expr.str field.str \
	estack.str util.str proto.str replace.str \
	idf.str macro.str stack.str stmt.str struct.str switch.str type.str \
	l_brace.str l_state.str l_outdef.str
# generated source files
GHSTRSRC = code.h declar.h decspecs.h def.h expr.h field.h \
	estack.h util.h proto.h replace.h \
	idf.h macro.h stack.h stmt.h struct.h switch.h type.h \
	l_brace.h l_state.h l_outdef.h
GSRC =	$(GCSRC)  $(GHSTRSRC)

# .h files generated by `make hfiles LLfiles'; PLEASE KEEP THIS UP-TO-DATE!
GHSRC =	botch_free.h dataflow.h debug.h density.h errout.h \
	idfsize.h ifdepth.h inputtype.h lapbuf.h argbuf.h lint.h \
	nobitfield.h nopp.h nocross.h \
	nparams.h numsize.h parbufsize.h pathlength.h Lpars.h \
	strsize.h target_sizes.h textsize.h use_tmp.h spec_arith.h static.h \
	regcount.h

HSRC = LLlex.h align.h arith.h assert.h atw.h class.h \
	 input.h label.h level.h mes.h sizes.h specials.h \
	 file_info.h tokenname.h l_lint.h

HFILES = $(HSRC) $(GHSRC) $(GHSTRSRC)

# generated files, for 'make clean' only
GENERATED = tokenfile.g Lpars.h LLfiles LL.output lint.out \
	print hfiles Cfiles $(GHSRC) $(GSRC) longnames $(LCSRC)

# include files containing ALLOCDEF specifications
OBJ =	$(COBJ) $(LOBJ) $(GOBJ)
SRC =	$(CSRC) $(LCSRC) $(GCSRC)

LINT = /usr/bin/lint
LINTFLAGS =

MYLINT = ../lpass2/lint
MYLINTFLAGS = -xh

#EXCLEXCLEXCLEXCL

.SUFFIXES: .str .h
.str.h:
	./make.allocd <$*.str >$*.h

Main:	Cfiles
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) $(CURRDIR)main ; else EMHOME=$(EMHOME); export EMHOME; ./Resolve main ; fi'
	@rm -f nmclash.o a.out

Emain:	Cfiles
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) $(CURRDIR)emain ; else EMHOME=$(EMHOME); export EMHOME; ./Resolve emain ; fi'
	@rm -f nmclash.o a.out

Omain:	Cfiles
	rm -f *.o
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) "COPTIONS="-DPEEPHOLE $(CURRDIR)omain ; else EMHOME=$(EMHOME); export EMHOME; ./Resolve omain ; fi'
	@rm -f nmclash.o a.out
	mv *.o PEEPHOLE

CEmain:	Cfiles
	rm -f *.o
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) "COPTIONS="-DCODE_EXPANDER $(CURRDIR)cemain ; else EMHOME=$(EMHOME); export EMHOME; ./Resolve cemain ; fi'
	@rm -f nmclash.o a.out
	mv *.o CODE_EXPANDER

Lnt:	Cfiles
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) $(CURRDIR)lnt ; else EMHOME=$(EMHOME); export EMHOME; ./Resolve lnt ; fi'
	@rm -f nmclash.o a.out

install:	Main
	rm -f $(EMHOME)/lib/em_cemcom $(EMHOME)/man/em_cemcom.6
	cp $(CURRDIR)main $(EMHOME)/lib/em_cemcom
	cp $(CURRDIR)cemcom.1 $(EMHOME)/man/em_cemcom.6

Oinstall:	Omain
	cp $(CURRDIR)omain $(EMHOME)/lib/em_cemcomO

cmp:	Main
	-cmp $(CURRDIR)main $(EMHOME)/lib/em_cemcom
	-cmp $(CURRDIR)cemcom.1 $(EMHOME)/man/em_cemcom.6

pr:
	@pr Makefile make.* char.tab Parameters $(HSRC) $(STRSRC) $(LSRC) $(CSRC)

opr:
	make pr | opr

clean:
	rm -f $(OBJ)
	rm -f $(GENERATED) main
	(cd .. ; rm -rf Xsrc)

cflow:	Cfiles
	$(CFLOW) $(CDEFS) $(SRC)

lint:	Cfiles
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) Xlint ; else sh Resolve Xlint ; fi'
	@rm -f nmclash.o a.out

mylint:	Cfiles
	sh -c 'if $(CC) nmclash.c > /dev/null 2>&1 ; then make "EMHOME="$(EMHOME) Xmylint ; else sh Resolve Xmylint ; fi'
	@rm -f nmclash.o a.out

longnames:	$(SRC) $(HFILES)
	sh -c 'if test -f longnames ; then : ; else touch longnames ; fi ; $(PRID) -l7 longnames $? > Xlongnames ; mv Xlongnames longnames'

# entry points not to be used directly

Cfiles:	hfiles LLfiles $(GENCFILES) $(GSRC) $(GHSRC) Makefile
	echo $(SRC) $(HFILES) > Cfiles

hfiles: ./make.hfiles Parameters
	./make.hfiles Parameters
	@touch hfiles

LLfiles: $(LSRC)
	$(GEN) $(GENOPTIONS) $(LSRC)
	@touch LLfiles

tokenfile.g:	tokenname.c make.tokfile
	<tokenname.c ./make.tokfile >tokenfile.g

symbol2str.c:	tokenname.c make.tokcase
	<tokenname.c ./make.tokcase >symbol2str.c

char.c:	char.tab
	$(TABGEN) -fchar.tab >char.c

next.c:	make.next $(STRSRC)
	./make.next $(STRSRC) >next.c

code.h:		make.allocd
declar.h:	make.allocd
decspecs.h:	make.allocd
def.h:		make.allocd
expr.h:		make.allocd
field.h:	make.allocd
idf.h:		make.allocd
macro.h:	make.allocd
stack.h:	make.allocd
stmt.h:		make.allocd
struct.h:	make.allocd
switch.h:	make.allocd
type.h:		make.allocd
estack.h:	make.allocd
util.h:		make.allocd
l_brace.h:	make.allocd
l_state.h:	make.allocd
l_outdef.h:	make.allocd

depend:	Cfiles
	sed '/^#AUTOAUTO/,$$d' Makefile >Makefile.new
	echo '#AUTOAUTOAUTOAUTOAUTOAUTOAUTOAUTOAUTOAUTO' >>Makefile.new
	$(MKDEP) $(SRC) | sed 's/\.c:/.o:/' >>Makefile.new
	mv Makefile Makefile.old
	mv Makefile.new Makefile

#INCLINCLINCLINCL

$(CURRDIR)main:	$(OBJ) $(CURRDIR)Makefile
	$(CC) $(COPTIONS) $(LDFLAGS) $(OBJ) $(LIBS) -o $(CURRDIR)main 
	size $(CURRDIR)main

$(CURRDIR)emain:	$(OBJ) $(CURRDIR)Makefile
	$(CC) $(COPTIONS) $(LDFLAGS) $(OBJ) $(ELIBS) -o $(CURRDIR)emain 
	size $(CURRDIR)emain

$(CURRDIR)omain:	$(OBJ) $(CURRDIR)Makefile
	$(CC) $(COPTIONS) $(LDFLAGS) $(OBJ) $(OLIBS) -o $(CURRDIR)omain 
	size $(CURRDIR)omain

$(CURRDIR)cemain:	$(OBJ) $(CURRDIR)Makefile
	$(CC) $(COPTIONS) $(LDFLAGS) $(OBJ) $(CELIBS) -o $(CURRDIR)cemain 
	size $(CURRDIR)cemain

$(CURRDIR)lnt:		$(OBJ) $(CURRDIR)Makefile
	$(CC) $(COPTIONS) $(LDFLAGS) $(OBJ) $(LLIBS) -o $(CURRDIR)lnt 
	size $(CURRDIR)lnt

Xlint:	$(SRC)
	$(LINT) $(CDEFS) $(LINTFLAGS) $(SRC)

Xmylint:	$(SRC)
	$(MYLINT) $(CDEFS) $(MYLINTFLAGS) $(SRC)

#AUTOAUTOAUTOAUTOAUTOAUTOAUTOAUTOAUTOAUTO
main.o: LLlex.h
main.o: Lpars.h
main.o: align.h
main.o: arith.h
main.o: debug.h
main.o: declar.h
main.o: file_info.h
main.o: idf.h
main.o: input.h
main.o: inputtype.h
main.o: level.h
main.o: lint.h
main.o: nobitfield.h
main.o: nocross.h
main.o: nopp.h
main.o: proto.h
main.o: sizes.h
main.o: spec_arith.h
main.o: specials.h
main.o: target_sizes.h
main.o: tokenname.h
main.o: type.h
main.o: use_tmp.h
idf.o: LLlex.h
idf.o: Lpars.h
idf.o: align.h
idf.o: arith.h
idf.o: assert.h
idf.o: botch_free.h
idf.o: debug.h
idf.o: declar.h
idf.o: decspecs.h
idf.o: def.h
idf.o: file_info.h
idf.o: idf.h
idf.o: idfsize.h
idf.o: label.h
idf.o: level.h
idf.o: lint.h
idf.o: nobitfield.h
idf.o: nocross.h
idf.o: nopp.h
idf.o: nparams.h
idf.o: proto.h
idf.o: sizes.h
idf.o: spec_arith.h
idf.o: specials.h
idf.o: stack.h
idf.o: struct.h
idf.o: target_sizes.h
idf.o: type.h
declarator.o: Lpars.h
declarator.o: arith.h
declarator.o: botch_free.h
declarator.o: debug.h
declarator.o: declar.h
declarator.o: def.h
declarator.o: expr.h
declarator.o: idf.h
declarator.o: label.h
declarator.o: level.h
declarator.o: lint.h
declarator.o: nobitfield.h
declarator.o: nocross.h
declarator.o: nopp.h
declarator.o: proto.h
declarator.o: sizes.h
declarator.o: spec_arith.h
declarator.o: target_sizes.h
declarator.o: type.h
decspecs.o: Lpars.h
decspecs.o: arith.h
decspecs.o: assert.h
decspecs.o: debug.h
decspecs.o: decspecs.h
decspecs.o: def.h
decspecs.o: level.h
decspecs.o: lint.h
decspecs.o: nobitfield.h
decspecs.o: spec_arith.h
decspecs.o: type.h
struct.o: LLlex.h
struct.o: Lpars.h
struct.o: align.h
struct.o: arith.h
struct.o: assert.h
struct.o: botch_free.h
struct.o: debug.h
struct.o: def.h
struct.o: field.h
struct.o: file_info.h
struct.o: idf.h
struct.o: level.h
struct.o: lint.h
struct.o: nobitfield.h
struct.o: nocross.h
struct.o: nopp.h
struct.o: proto.h
struct.o: sizes.h
struct.o: spec_arith.h
struct.o: stack.h
struct.o: struct.h
struct.o: target_sizes.h
struct.o: type.h
expr.o: LLlex.h
expr.o: Lpars.h
expr.o: arith.h
expr.o: assert.h
expr.o: botch_free.h
expr.o: debug.h
expr.o: declar.h
expr.o: decspecs.h
expr.o: def.h
expr.o: expr.h
expr.o: file_info.h
expr.o: idf.h
expr.o: label.h
expr.o: level.h
expr.o: lint.h
expr.o: nobitfield.h
expr.o: nocross.h
expr.o: nopp.h
expr.o: sizes.h
expr.o: spec_arith.h
expr.o: target_sizes.h
expr.o: type.h
ch3.o: Lpars.h
ch3.o: arith.h
ch3.o: assert.h
ch3.o: debug.h
ch3.o: def.h
ch3.o: expr.h
ch3.o: file_info.h
ch3.o: idf.h
ch3.o: label.h
ch3.o: lint.h
ch3.o: nobitfield.h
ch3.o: nopp.h
ch3.o: proto.h
ch3.o: spec_arith.h
ch3.o: struct.h
ch3.o: type.h
ch3bin.o: Lpars.h
ch3bin.o: arith.h
ch3bin.o: botch_free.h
ch3bin.o: expr.h
ch3bin.o: idf.h
ch3bin.o: label.h
ch3bin.o: lint.h
ch3bin.o: nobitfield.h
ch3bin.o: nopp.h
ch3bin.o: spec_arith.h
ch3bin.o: struct.h
ch3bin.o: type.h
cstoper.o: Lpars.h
cstoper.o: arith.h
cstoper.o: assert.h
cstoper.o: debug.h
cstoper.o: expr.h
cstoper.o: idf.h
cstoper.o: label.h
cstoper.o: nobitfield.h
cstoper.o: nocross.h
cstoper.o: nopp.h
cstoper.o: sizes.h
cstoper.o: spec_arith.h
cstoper.o: target_sizes.h
cstoper.o: type.h
fltcstoper.o: Lpars.h
fltcstoper.o: arith.h
fltcstoper.o: assert.h
fltcstoper.o: debug.h
fltcstoper.o: expr.h
fltcstoper.o: idf.h
fltcstoper.o: label.h
fltcstoper.o: nobitfield.h
fltcstoper.o: nocross.h
fltcstoper.o: nopp.h
fltcstoper.o: sizes.h
fltcstoper.o: spec_arith.h
fltcstoper.o: target_sizes.h
fltcstoper.o: type.h
arith.o: Lpars.h
arith.o: arith.h
arith.o: assert.h
arith.o: debug.h
arith.o: expr.h
arith.o: field.h
arith.o: idf.h
arith.o: label.h
arith.o: lint.h
arith.o: mes.h
arith.o: nobitfield.h
arith.o: nocross.h
arith.o: nopp.h
arith.o: proto.h
arith.o: sizes.h
arith.o: spec_arith.h
arith.o: target_sizes.h
arith.o: type.h
code.o: Lpars.h
code.o: arith.h
code.o: assert.h
code.o: atw.h
code.o: botch_free.h
code.o: code.h
code.o: dataflow.h
code.o: debug.h
code.o: declar.h
code.o: decspecs.h
code.o: def.h
code.o: expr.h
code.o: file_info.h
code.o: idf.h
code.o: l_lint.h
code.o: label.h
code.o: level.h
code.o: lint.h
code.o: nobitfield.h
code.o: nocross.h
code.o: nopp.h
code.o: sizes.h
code.o: spec_arith.h
code.o: specials.h
code.o: stack.h
code.o: stmt.h
code.o: target_sizes.h
code.o: type.h
code.o: use_tmp.h
dumpidf.o: Lpars.h
dumpidf.o: arith.h
dumpidf.o: debug.h
dumpidf.o: declar.h
dumpidf.o: def.h
dumpidf.o: expr.h
dumpidf.o: field.h
dumpidf.o: idf.h
dumpidf.o: label.h
dumpidf.o: lint.h
dumpidf.o: nobitfield.h
dumpidf.o: nopp.h
dumpidf.o: proto.h
dumpidf.o: spec_arith.h
dumpidf.o: stack.h
dumpidf.o: static.h
dumpidf.o: struct.h
dumpidf.o: type.h
error.o: LLlex.h
error.o: arith.h
error.o: debug.h
error.o: def.h
error.o: errout.h
error.o: expr.h
error.o: file_info.h
error.o: label.h
error.o: lint.h
error.o: nopp.h
error.o: spec_arith.h
error.o: tokenname.h
field.o: Lpars.h
field.o: align.h
field.o: arith.h
field.o: assert.h
field.o: code.h
field.o: debug.h
field.o: expr.h
field.o: field.h
field.o: idf.h
field.o: label.h
field.o: lint.h
field.o: nobitfield.h
field.o: nocross.h
field.o: nopp.h
field.o: sizes.h
field.o: spec_arith.h
field.o: target_sizes.h
field.o: type.h
tokenname.o: LLlex.h
tokenname.o: Lpars.h
tokenname.o: arith.h
tokenname.o: file_info.h
tokenname.o: idf.h
tokenname.o: nopp.h
tokenname.o: spec_arith.h
tokenname.o: tokenname.h
LLlex.o: LLlex.h
LLlex.o: Lpars.h
LLlex.o: arith.h
LLlex.o: assert.h
LLlex.o: class.h
LLlex.o: debug.h
LLlex.o: def.h
LLlex.o: file_info.h
LLlex.o: idf.h
LLlex.o: idfsize.h
LLlex.o: input.h
LLlex.o: lint.h
LLlex.o: macro.h
LLlex.o: nocross.h
LLlex.o: nopp.h
LLlex.o: numsize.h
LLlex.o: sizes.h
LLlex.o: spec_arith.h
LLlex.o: strsize.h
LLlex.o: target_sizes.h
LLmessage.o: LLlex.h
LLmessage.o: Lpars.h
LLmessage.o: arith.h
LLmessage.o: file_info.h
LLmessage.o: idf.h
LLmessage.o: nopp.h
LLmessage.o: spec_arith.h
input.o: file_info.h
input.o: input.h
input.o: inputtype.h
input.o: nopp.h
domacro.o: LLlex.h
domacro.o: Lpars.h
domacro.o: arith.h
domacro.o: assert.h
domacro.o: botch_free.h
domacro.o: class.h
domacro.o: debug.h
domacro.o: file_info.h
domacro.o: idf.h
domacro.o: idfsize.h
domacro.o: ifdepth.h
domacro.o: input.h
domacro.o: macro.h
domacro.o: nopp.h
domacro.o: nparams.h
domacro.o: parbufsize.h
domacro.o: spec_arith.h
domacro.o: textsize.h
replace.o: LLlex.h
replace.o: argbuf.h
replace.o: arith.h
replace.o: assert.h
replace.o: class.h
replace.o: debug.h
replace.o: file_info.h
replace.o: idf.h
replace.o: idfsize.h
replace.o: input.h
replace.o: lapbuf.h
replace.o: macro.h
replace.o: nopp.h
replace.o: nparams.h
replace.o: numsize.h
replace.o: pathlength.h
replace.o: replace.h
replace.o: spec_arith.h
replace.o: static.h
replace.o: strsize.h
init.o: class.h
init.o: idf.h
init.o: macro.h
init.o: nopp.h
options.o: align.h
options.o: arith.h
options.o: botch_free.h
options.o: class.h
options.o: dataflow.h
options.o: idf.h
options.o: idfsize.h
options.o: lint.h
options.o: macro.h
options.o: nobitfield.h
options.o: nocross.h
options.o: nopp.h
options.o: sizes.h
options.o: spec_arith.h
options.o: target_sizes.h
options.o: use_tmp.h
skip.o: LLlex.h
skip.o: arith.h
skip.o: class.h
skip.o: file_info.h
skip.o: input.h
skip.o: nopp.h
skip.o: spec_arith.h
stack.o: Lpars.h
stack.o: arith.h
stack.o: botch_free.h
stack.o: debug.h
stack.o: def.h
stack.o: idf.h
stack.o: level.h
stack.o: lint.h
stack.o: mes.h
stack.o: nobitfield.h
stack.o: nopp.h
stack.o: spec_arith.h
stack.o: stack.h
stack.o: struct.h
stack.o: type.h
type.o: Lpars.h
type.o: align.h
type.o: arith.h
type.o: botch_free.h
type.o: decspecs.h
type.o: def.h
type.o: idf.h
type.o: lint.h
type.o: nobitfield.h
type.o: nocross.h
type.o: nopp.h
type.o: proto.h
type.o: sizes.h
type.o: spec_arith.h
type.o: target_sizes.h
type.o: type.h
ch3mon.o: Lpars.h
ch3mon.o: arith.h
ch3mon.o: botch_free.h
ch3mon.o: def.h
ch3mon.o: expr.h
ch3mon.o: idf.h
ch3mon.o: label.h
ch3mon.o: lint.h
ch3mon.o: nobitfield.h
ch3mon.o: nopp.h
ch3mon.o: spec_arith.h
ch3mon.o: type.h
label.o: Lpars.h
label.o: arith.h
label.o: def.h
label.o: idf.h
label.o: label.h
label.o: level.h
label.o: lint.h
label.o: nobitfield.h
label.o: nopp.h
label.o: spec_arith.h
label.o: type.h
eval.o: Lpars.h
eval.o: align.h
eval.o: arith.h
eval.o: assert.h
eval.o: atw.h
eval.o: code.h
eval.o: dataflow.h
eval.o: debug.h
eval.o: def.h
eval.o: expr.h
eval.o: idf.h
eval.o: label.h
eval.o: level.h
eval.o: lint.h
eval.o: mes.h
eval.o: nobitfield.h
eval.o: nocross.h
eval.o: nopp.h
eval.o: sizes.h
eval.o: spec_arith.h
eval.o: specials.h
eval.o: stack.h
eval.o: target_sizes.h
eval.o: type.h
switch.o: Lpars.h
switch.o: arith.h
switch.o: assert.h
switch.o: botch_free.h
switch.o: code.h
switch.o: debug.h
switch.o: density.h
switch.o: expr.h
switch.o: idf.h
switch.o: label.h
switch.o: nobitfield.h
switch.o: nocross.h
switch.o: nopp.h
switch.o: sizes.h
switch.o: spec_arith.h
switch.o: switch.h
switch.o: target_sizes.h
switch.o: type.h
conversion.o: Lpars.h
conversion.o: arith.h
conversion.o: lint.h
conversion.o: nobitfield.h
conversion.o: nocross.h
conversion.o: sizes.h
conversion.o: spec_arith.h
conversion.o: target_sizes.h
conversion.o: type.h
util.o: Lpars.h
util.o: align.h
util.o: def.h
util.o: lint.h
util.o: nocross.h
util.o: regcount.h
util.o: sizes.h
util.o: stack.h
util.o: target_sizes.h
util.o: use_tmp.h
util.o: util.h
proto.o: Lpars.h
proto.o: align.h
proto.o: arith.h
proto.o: assert.h
proto.o: botch_free.h
proto.o: debug.h
proto.o: declar.h
proto.o: decspecs.h
proto.o: def.h
proto.o: expr.h
proto.o: idf.h
proto.o: idfsize.h
proto.o: label.h
proto.o: level.h
proto.o: lint.h
proto.o: nobitfield.h
proto.o: nocross.h
proto.o: nopp.h
proto.o: nparams.h
proto.o: proto.h
proto.o: spec_arith.h
proto.o: stack.h
proto.o: struct.h
proto.o: target_sizes.h
proto.o: type.h
pragma.o: LLlex.h
pragma.o: Lpars.h
pragma.o: arith.h
pragma.o: assert.h
pragma.o: botch_free.h
pragma.o: class.h
pragma.o: debug.h
pragma.o: file_info.h
pragma.o: idf.h
pragma.o: idfsize.h
pragma.o: ifdepth.h
pragma.o: input.h
pragma.o: macro.h
pragma.o: nopp.h
pragma.o: nparams.h
pragma.o: parbufsize.h
pragma.o: spec_arith.h
pragma.o: textsize.h
blocks.o: Lpars.h
blocks.o: align.h
blocks.o: arith.h
blocks.o: atw.h
blocks.o: label.h
blocks.o: lint.h
blocks.o: nocross.h
blocks.o: sizes.h
blocks.o: spec_arith.h
blocks.o: stack.h
blocks.o: target_sizes.h
dataflow.o: dataflow.h
l_lint.o: LLlex.h
l_lint.o: Lpars.h
l_lint.o: arith.h
l_lint.o: assert.h
l_lint.o: code.h
l_lint.o: debug.h
l_lint.o: def.h
l_lint.o: expr.h
l_lint.o: file_info.h
l_lint.o: idf.h
l_lint.o: interface.h
l_lint.o: l_lint.h
l_lint.o: l_outdef.h
l_lint.o: l_state.h
l_lint.o: label.h
l_lint.o: level.h
l_lint.o: lint.h
l_lint.o: nobitfield.h
l_lint.o: nopp.h
l_lint.o: spec_arith.h
l_lint.o: stack.h
l_lint.o: type.h
l_states.o: LLlex.h
l_states.o: Lpars.h
l_states.o: arith.h
l_states.o: assert.h
l_states.o: code.h
l_states.o: debug.h
l_states.o: def.h
l_states.o: expr.h
l_states.o: file_info.h
l_states.o: idf.h
l_states.o: interface.h
l_states.o: l_brace.h
l_states.o: l_comment.h
l_states.o: l_lint.h
l_states.o: l_outdef.h
l_states.o: l_state.h
l_states.o: label.h
l_states.o: level.h
l_states.o: lint.h
l_states.o: nobitfield.h
l_states.o: nopp.h
l_states.o: spec_arith.h
l_states.o: stack.h
l_states.o: type.h
l_misc.o: LLlex.h
l_misc.o: Lpars.h
l_misc.o: arith.h
l_misc.o: code.h
l_misc.o: def.h
l_misc.o: expr.h
l_misc.o: file_info.h
l_misc.o: idf.h
l_misc.o: interface.h
l_misc.o: l_state.h
l_misc.o: label.h
l_misc.o: level.h
l_misc.o: lint.h
l_misc.o: nobitfield.h
l_misc.o: nopp.h
l_misc.o: spec_arith.h
l_misc.o: stack.h
l_misc.o: type.h
l_ev_ord.o: LLlex.h
l_ev_ord.o: Lpars.h
l_ev_ord.o: arith.h
l_ev_ord.o: assert.h
l_ev_ord.o: code.h
l_ev_ord.o: debug.h
l_ev_ord.o: def.h
l_ev_ord.o: expr.h
l_ev_ord.o: file_info.h
l_ev_ord.o: idf.h
l_ev_ord.o: interface.h
l_ev_ord.o: l_lint.h
l_ev_ord.o: l_state.h
l_ev_ord.o: label.h
l_ev_ord.o: level.h
l_ev_ord.o: lint.h
l_ev_ord.o: nobitfield.h
l_ev_ord.o: nopp.h
l_ev_ord.o: spec_arith.h
l_ev_ord.o: stack.h
l_ev_ord.o: type.h
l_outdef.o: LLlex.h
l_outdef.o: Lpars.h
l_outdef.o: arith.h
l_outdef.o: assert.h
l_outdef.o: code.h
l_outdef.o: debug.h
l_outdef.o: def.h
l_outdef.o: expr.h
l_outdef.o: field.h
l_outdef.o: file_info.h
l_outdef.o: idf.h
l_outdef.o: interface.h
l_outdef.o: l_class.h
l_outdef.o: l_comment.h
l_outdef.o: l_lint.h
l_outdef.o: l_outdef.h
l_outdef.o: label.h
l_outdef.o: level.h
l_outdef.o: lint.h
l_outdef.o: nobitfield.h
l_outdef.o: nopp.h
l_outdef.o: spec_arith.h
l_outdef.o: stack.h
l_outdef.o: struct.h
l_outdef.o: type.h
l_comment.o: arith.h
l_comment.o: interface.h
l_comment.o: l_comment.h
l_comment.o: l_state.h
l_comment.o: lint.h
l_comment.o: spec_arith.h
l_dummy.o: arith.h
l_dummy.o: label.h
l_dummy.o: lint.h
l_dummy.o: spec_arith.h
tokenfile.o: Lpars.h
declar.o: LLlex.h
declar.o: Lpars.h
declar.o: arith.h
declar.o: code.h
declar.o: debug.h
declar.o: declar.h
declar.o: decspecs.h
declar.o: def.h
declar.o: expr.h
declar.o: field.h
declar.o: file_info.h
declar.o: idf.h
declar.o: l_lint.h
declar.o: l_state.h
declar.o: label.h
declar.o: level.h
declar.o: lint.h
declar.o: nobitfield.h
declar.o: nocross.h
declar.o: nopp.h
declar.o: proto.h
declar.o: sizes.h
declar.o: spec_arith.h
declar.o: struct.h
declar.o: target_sizes.h
declar.o: type.h
statement.o: LLlex.h
statement.o: Lpars.h
statement.o: arith.h
statement.o: botch_free.h
statement.o: code.h
statement.o: debug.h
statement.o: def.h
statement.o: expr.h
statement.o: file_info.h
statement.o: idf.h
statement.o: l_lint.h
statement.o: l_state.h
statement.o: label.h
statement.o: lint.h
statement.o: nobitfield.h
statement.o: nopp.h
statement.o: spec_arith.h
statement.o: stack.h
statement.o: type.h
expression.o: LLlex.h
expression.o: Lpars.h
expression.o: arith.h
expression.o: code.h
expression.o: expr.h
expression.o: file_info.h
expression.o: idf.h
expression.o: label.h
expression.o: lint.h
expression.o: nobitfield.h
expression.o: nopp.h
expression.o: spec_arith.h
expression.o: type.h
program.o: LLlex.h
program.o: Lpars.h
program.o: arith.h
program.o: code.h
program.o: declar.h
program.o: decspecs.h
program.o: def.h
program.o: expr.h
program.o: file_info.h
program.o: idf.h
program.o: l_state.h
program.o: label.h
program.o: lint.h
program.o: nobitfield.h
program.o: nopp.h
program.o: spec_arith.h
program.o: type.h
Lpars.o: Lpars.h
ival.o: LLlex.h
ival.o: Lpars.h
ival.o: arith.h
ival.o: assert.h
ival.o: debug.h
ival.o: def.h
ival.o: estack.h
ival.o: expr.h
ival.o: field.h
ival.o: file_info.h
ival.o: idf.h
ival.o: l_lint.h
ival.o: label.h
ival.o: level.h
ival.o: lint.h
ival.o: nobitfield.h
ival.o: nocross.h
ival.o: nopp.h
ival.o: proto.h
ival.o: sizes.h
ival.o: spec_arith.h
ival.o: struct.h
ival.o: target_sizes.h
ival.o: type.h
char.o: class.h
symbol2str.o: Lpars.h
