# (c) copyright 1983 by the Vrije Universiteit, Amsterdam, The Netherlands.
# $Header$
callname ack
name cpp
	# no from, this is a preprocessor
	to .i
	program {EM}/lib/cpp
	mapflag -I* CPP_F={CPP_F?} -I*
	mapflag -U* CPP_F={CPP_F?} -U*
	mapflag -D* CPP_F={CPP_F?} -D*
	args {CPP_F?} {INCLUDES?} -D{NAME} -DEM_WSIZE={w} -DEM_PSIZE={p} \
-DEM_SSIZE={s} -DEM_LSIZE={l} -DEM_FSIZE={f} -DEM_DSIZE={d} <
	stdout
	prep is
end
name cem
	from .c
	to .k
	program {EM}/lib/em_cem
	mapflag -p CEM_F={CEM_F?} -Xp
	mapflag -L CEM_F={CEM_F?} -l
	args -Vw{w}i{w}p{p}f{f}s{s}l{l}d{d} {CEM_F?}
	stdin
	stdout
	prep always
	rts .c
	need .c
	callname acc
	callname cc
end
var PC_PCPATH={EM}/lib/pc_pem
var PC_ERRPATH={EM}/etc/pc_rt_errors
name pc
	from .p
	to .k
	program {EM}/lib/em_pc
	mapflag -p PC_F={PC_F?} -p
	mapflag -w PC_F={PC_F?} -w
	mapflag -E PC_F={PC_F?} -E
	mapflag -e PC_F={PC_F?} -e
	mapflag -{*} PC_F={PC_F?} -\{*}
	mapflag -L PC_F={PC_F?} -\{l-}
	mapflag -Pr* PC_ERRPATH=*
	mapflag -PR* PC_PCPATH=*
	args -Vw{w}p{p}f{d}l{l} -R{PC_PCPATH} -r{PC_ERRPATH} {PC_F?} < > {SOURCE}
	prep cond
	rts .p
	need .p
	callname apc
	callname pc
 end
 name abc
	from .b
	to .e
	program /usr/mk/bin/bem
	mapflag -h ABC_F={ABC_F?} -h
	mapflag -w ABC_F={ABC_F?} -w
	mapflag -L ABC_F={ABC_F?} -L
	mapflag -E ABC_F={ABC_F?} -E
#	mapflag -d ABC_F={ABC_F?} -d
	args {ABC_F?} < > {SOURCE}
	prep always
	rts .b
	need .b
	callname abc
end
name encode
	from .e
	to .k
	program {EM}/lib/em_encode
	args <
	prep cond
	stdout
end
name opt
	from .k
	to .m
	program {EM}/lib/em_opt
	mapflag -LIB OPT_F={OPT_F?} -L
	args {OPT_F?} <
	stdout
	optimizer
end
name decode
	from .k.m.g
	to .e
	program {EM}/lib/em_decode
	args <
	stdout
end
